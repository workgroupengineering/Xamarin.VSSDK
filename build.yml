# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=azure-devops
trigger:
  batch: false
  branches:
    include:
    - main

# https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#pr-triggers
pr:
  autoCancel: false
  branches:
    include:
    - main

variables:
  - group: Xamarin NuGetized

resources:
  repositories:
  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

jobs:
- job: Build
  pool:
    name: AzurePipelines-EO
    demands:
    - ImageOverride -equals AzurePipelinesWindows2019compliant

  steps:
  - checkout: self
    clean: true

  - task: UseDotNet@2
    inputs:
      version: 2.1.818

  - task: UseDotNet@2
    inputs:
      useGlobalJson: true

  - task: NuGetAuthenticate@0
    displayName: Authenticate NuGet feeds
    inputs:
      forceReinstallCredentialProvider: true

  - task: MSBuild@1
    displayName: Restore
    inputs:
      solution: src\Xamarin.VSSDK.sln
      msbuildArguments: /t:Restore /p:Configuration=Release /bl:"$(Build.ArtifactStagingDirectory)\restore.binlog"

  - task: MSBuild@1
    displayName: Build
    inputs:
      solution: src\Xamarin.VSSDK.sln
      msbuildArguments: /t:Build /p:Configuration=Release /p:Out="$(Build.ArtifactStagingDirectory)" /bl:"$(Build.ArtifactStagingDirectory)\build.binlog

  # Disabled
  - task: VSTest@2
    displayName: Test
    enabled: false
    inputs:
      testAssemblyVer2: |-
        **\*.Tests.dll
        !**\xunit*.dll
      codeCoverageEnabled: 'true'
      publishRunAttachments: 'true'
      vsTestVersion: 15.0

  - template: sleet/v1.yml@templates
    parameters:
      connectionString: $(SLEET_FEED_CONNECTIONSTRING)
      container: xvs
      packages: $(Build.ArtifactStagingDirectory)

  - powershell: |
      [IO.File]::Copy("$(Build.SourcesDirectory)/NuGet.Config", "$(Build.ArtifactStagingDirectory)/NuGet.Config")

      $outDirectory = "$(Build.SourcesDirectory)/out"
      Write-Host "Build output directory: ${outDirectory}"
      $files = [IO.Directory]::GetFiles($outDirectory, '*.nupkg')

      if ($null -ne $files -and $files.Count -gt 0) {
        $files | foreach {
          $filename = [IO.Path]::GetFileName($_)
          $destPathAndFilename = [IO.Path]::Combine("$(Build.ArtifactStagingDirectory)", $filename)
          Write-Host "Copy $_ to ${destPathAndFilename}"
          [IO.File]::Copy($_, $destPathAndFilename)
        }
      } else {
        Write-Host "ERROR: Nuget files not found: ${$outDirectory}"
      }
    displayName: 'Stage artifacts'

  - task: PublishBuildArtifacts@1
    displayName: Publish
    condition: always()
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: output
      ArtifactType: Container

  - pwsh: |
      $branch = '$(Build.SourceBranch)'
      $push = "$($branch -eq 'refs/heads/main' -or $branch -match 'refs/heads/d\d\d-*|refs/heads/rel/*')".ToLowerInvariant()
      Write-Host "##vso[task.setvariable variable=PushPackages;]$push"
    displayName: Set PushPackages
    condition: eq(variables['PushPackages'], '')

  - task: NuGetCommand@2
    displayName: 'NuGet Update'
    condition: and(succeeded(), eq(variables['PushPackages'], 'true'))
    inputs:
      command: custom
      arguments: 'update -self'

  - task: NuGetCommand@2
    displayName: Push Packages
    continueOnError: true
    condition: and(succeeded(), eq(variables['PushPackages'], 'true'))
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: external
      publishFeedCredentials: 'xamarin-impl public feed'
