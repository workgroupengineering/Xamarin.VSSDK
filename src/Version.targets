<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <GitSkipCache>true</GitSkipCache>
    <GitIgnoreTagVersion>true</GitIgnoreTagVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="GitInfo" Version="*" PrivateAssets="all" />
  </ItemGroup>

  <Target Name="Version" DependsOnTargets="SetVersion">
    <Message Importance="high" Text="PackageVersion=$(PackageVersion)
AssemblyVersion=$(AssemblyVersion)" />
  </Target>

  <Target Name="_ClearTagVersion" AfterTargets="_GitBaseVersionTag" BeforeTargets="_GitBaseVersionFile">
    <PropertyGroup Condition="'$(GitBaseVersion)' != '' and '$(GitSemVerSource)' == 'Tag' and '$(GitCommits)' != '0'">
      <!-- If the current commit isn't exactly the tagged commit, remove the determined base version, 
           so that probing continues as usual (GitInfo file follows).
           This means that we can push a version from master/dev without having to create a branch.
           Typical "true" releases will likely come from versioned branches though.
      -->
      <GitBaseVersion></GitBaseVersion>
    </PropertyGroup>
  </Target>

  <Target Name="_SetLocalCommits" BeforeTargets="_GitPopulateVersionInfo" Condition="'$(CI)' != 'true'">
    <PropertyGroup>
      <!-- Local builds should always be commit count +1, since we'll be always working on the next version to be published. -->
      <GitCommits>$([MSBuild]::Add('$(GitCommits)', '1'))</GitCommits>
    </PropertyGroup>
  </Target>

  <!-- '$(ExcludeRestorePackageImports)' == 'true' when invoking /t:Restore -->
  <Target Name="SetVersion" BeforeTargets="Build" DependsOnTargets="GitVersion" Condition="'$(ExcludeRestorePackageImports)' != 'true'">
    <PropertyGroup>
      <!-- PR builds are *always* prerelease -->
      <!-- TFS case: BUILD_REASON=PullRequest and BUILD_SOURCEBRANCH=refs/pull/#/merge -->
      <GitSemVerDashLabel Condition="'$(TF_BUILD)' == 'true' and '$(BUILD_REASON)' == 'PullRequest'">-pr$(BUILD_SOURCEBRANCH.Substring(10).TrimEnd('/merge'))</GitSemVerDashLabel>
      <GitSemVerDashLabel Condition="'$(APPVEYOR_PULL_REQUEST_NUMBER)' != ''">-pr$(APPVEYOR_PULL_REQUEST_NUMBER)</GitSemVerDashLabel>

      <!-- NOTE: build metadata does not affect version matching, so even if you work from a different branch+commit that gets 
           rebased+merged later on, the version # might still be the same (provided there weren't additional commits in master 
           before the rebase+merge.
      -->
      <_IndexOfBranchSlash>$(GitBranch.LastIndexOf('/'))</_IndexOfBranchSlash>
      <_IndexOfBranchSubstring>$([MSBuild]::Add('$(_IndexOfBranchSlash)', '1'))</_IndexOfBranchSubstring>
      <_GitBranch Condition="'$(_IndexOfBranchSlash)' != '0'">$(GitBranch.Substring($(_IndexOfBranchSubstring)))</_GitBranch>
      <_GitBranch Condition="'$(_IndexOfBranchSlash)' == '0'">$(GitBranch)</_GitBranch>

      <PackageVersion>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)$(GitSemVerDashLabel)+$(_GitBranch).$(GitCommit)</PackageVersion>
      <AssemblyVersion>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</AssemblyVersion>
      <InformationalVersion>$(PackageVersion)</InformationalVersion>
    </PropertyGroup>
  </Target>
  
  <PropertyGroup>
    <VersionImported>true</VersionImported>
  </PropertyGroup>
</Project>
